---
import LanguageSelector from './LanguageSelector.astro';
import logoImage from '../assets/logo.webp';

export interface Props {
    currentLanguage?: string;
    isAuthenticated?: boolean;
    username?: string;
    balance?: number;
    showBalance?: boolean;
}

const {
    currentLanguage = 'uk',
} = Astro.props;

const currentPath = Astro.url.pathname;
const isEnglish = currentPath.startsWith('/en/') || currentPath === '/en';
// Prioritize URL-based detection over currentLanguage prop
const lang = isEnglish ? 'en' : (currentLanguage || 'uk');

const t = {
    uk: {
        home: '–ì–æ–ª–æ–≤–Ω–∞',
        guides: '–ü–æ—Å—ñ–±–Ω–∏–∫–∏',
        magic: '–ú–∞–≥—ñ—è',
        pathways: '–®–ª—è—Ö–∏',
        promoters: '–ü—Ä–æ–º–æ—É—Ç–µ—Ä—Å—Ç–≤–æ',
        support: '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞',
        search: '–ü–æ—à—É–∫'
    },
    en: {
        home: 'Home',
        guides: 'Guides',
        magic: 'Magic',
        pathways: 'Pathways',
        promoters: 'Promoters',
        support: 'Support',
        search: 'Search'
    }
};

const translations = t[lang as keyof typeof t] || t.uk;

const navigationLinks = [
    {
        path: lang === 'en' ? '/en/' : '/',
        title: translations.home,
        external: false,
        active: true,
        spaMessage: {
            type: 'spa-navigate',
            path: lang === 'en' ? '/en/' : '/',
            url: 'https://www.mysterria.net/'
        }
    },
    {
        path: lang === 'en' ? '/en/guides/towns/' : '/guides/towns/',
        title: translations.guides,
        external: false,
        active: false,
        spaMessage: null
    },
    {
        path: lang === 'en' ? '/en/magic/pathways/' : '/magic/pathways/',
        title: translations.magic,
        external: true,
        active: false,
        spaMessage: null
    },
    {
        path: lang === 'en' ? '/en/pathways/door/' : '/pathways/door/',
        title: translations.pathways,
        external: true,
        active: false,
        spaMessage: null
    },
    {
        path: lang === 'en' ? '/en/promoters/' : '/promoters/',
        title: translations.promoters,
        external: false,
        active: false,
        spaMessage: null
    },
    {
        path: lang === 'en' ? '/en/support/' : '/support/',
        title: translations.support,
        external: false,
        active: false,
        spaMessage: null
    },
];
---

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">

<header class="main-header" data-main-header>
    <div class="header-content">
        <!-- Logo -->
        <a href="https://www.mysterria.net" class="header-logo-link" data-spa-nav="true">
            <img src={logoImage.src} alt="Mysterria" class="logo-icon" width="44" height="46" />
            <span class="logo-text">Mysterria</span>
        </a>

        <!-- Main Navigation -->
        <nav class="navigation">
            {navigationLinks.map(link => (
                    <a
                            href={link.path}
                            class={`nav-link ${link.active ? 'active' : ''}`}
                            data-path={link.path}
                            data-external={link.external}
                            data-spa-nav={link.external}
                    >
                        {link.title}
                    </a>
            ))}
        </nav>

        <!-- Header Actions -->
        <div class="header-actions">
            <!-- Custom Theme Toggle -->
            <button class="theme-toggle-button nav-separator" aria-label="Toggle theme" data-theme-toggle>
                <span class="theme-emoji" data-theme-icon>üåô</span>
            </button>

            <!-- Language Selector -->
            <LanguageSelector currentLanguage={lang}/>

            <!-- Search Button -->
            <button
                    class="search-button"
                    aria-label={translations.search}
                    data-open-modal
                    data-search-modal
            >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"></circle>
                    <path d="m21 21-4.35-4.35"></path>
                </svg>
                <span class="search-text hide-mobile">{translations.search}</span>
                <kbd class="search-shortcut hide-mobile">‚åòK</kbd>
            </button>

            <!-- Mobile Navigation Toggle -->
            <button
                    class="mobile-nav-toggle"
                    aria-expanded="false"
                    aria-label="Toggle navigation"
                    data-mobile-toggle
            >
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="3" y1="6" x2="21" y2="6"></line>
                    <line x1="3" y1="12" x2="21" y2="12"></line>
                    <line x1="3" y1="18" x2="21" y2="18"></line>
                </svg>
            </button>
        </div>
    </div>

    <!-- Mobile Navigation Overlay -->
    <div class="mobile-nav-overlay" data-mobile-overlay style="display: none;">
        <div class="mobile-nav-backdrop" data-mobile-backdrop></div>
        <nav class="mobile-nav">
            <div class="mobile-nav-header">
                <button class="mobile-nav-close" data-mobile-close aria-label="Close navigation">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>

            <div class="mobile-nav-content">
                {navigationLinks.map(link => (
                        <a
                                href={link.path}
                                class={`mobile-nav-link ${link.active ? 'active' : ''}`}
                                data-mobile-link
                                data-external={link.external}
                                data-spa-nav={link.external}
                        >
                            {link.title}
                        </a>
                ))}

                <div class="mobile-nav-actions">
                    <!-- Mobile Search -->
                    <button
                            class="mobile-search-button"
                            aria-label={translations.search}
                            data-open-modal
                            data-search-modal
                    >
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                             stroke-width="2">
                            <circle cx="11" cy="11" r="8"></circle>
                            <path d="m21 21-4.35-4.35"></path>
                        </svg>
                        <span>{translations.search}</span>
                    </button>

                    <!-- Mobile Theme Toggle -->
                    <button class="mobile-theme-toggle" aria-label="Toggle theme" data-mobile-theme-toggle>
                        <span class="theme-emoji" data-mobile-theme-icon>üåô</span>
                        <span>Theme</span>
                    </button>

                    <div class="mobile-language-selector">
                        <LanguageSelector currentLanguage={lang}/>
                    </div>
                </div>
            </div>
        </nav>
    </div>
</header>

<style>
    .main-header {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: 64px;
        padding: 0 16px;
        gap: 24px;
        background: color-mix(in srgb, var(--myst-bg) 80%, transparent);
        backdrop-filter: blur(12px);
        border-bottom: 1px solid color-mix(in srgb, white 15%, transparent);
        z-index: 1000;
    }

    .header-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        gap: 32px;
    }

    .header-logo-link {
        flex-shrink: 0;
        display: flex;
        align-items: center;
        gap: 12px;
        text-decoration: none;
        color: var(--myst-ink);
        transition: all 0.3s ease;
    }

    .header-logo-link:hover {
        color: var(--myst-gold);
    }

    .logo-icon {
        border-radius: 4px;
        object-fit: contain;
    }

    .logo-text {
        font-family: "Inter", sans-serif;
        font-size: 18px;
        font-weight: 600;
    }

    .navigation {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-left: 80px;
    }

    .nav-link {
        padding: 10px 16px;
        border-radius: 6px;
        color: #a1a1aa;
        text-decoration: none;
        font-family: "Inter", sans-serif;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        min-width: 60px;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 40px;
    }

    .nav-link:hover {
        color: var(--myst-ink-strong);
    }

    .nav-link.active {
        color: var(--myst-ink-strong);
        background: color-mix(in srgb, white 5%, transparent);
        border: 1px solid color-mix(in srgb, white 10%, transparent);
    }

    .header-actions {
        display: flex;
        align-items: center;
        gap: 12px;
        flex: 1;
        min-width: 0;
    }

    .mobile-nav-toggle {
        display: none;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        background: color-mix(in srgb, var(--myst-bg) 60%, transparent);
        border: 1px solid color-mix(in srgb, white 15%, transparent);
        color: var(--myst-ink);
        cursor: pointer;
        border-radius: 6px;
        transition: all 0.3s ease;
        backdrop-filter: blur(8px);
    }

    .mobile-nav-toggle:hover {
        background: color-mix(in srgb, white 5%, transparent);
        border-color: color-mix(in srgb, white 30%, transparent);
    }

    /* Mobile Navigation */
    .mobile-nav-overlay {
        position: fixed;
        inset: 0;
        z-index: 1000;
        display: flex;
    }

    .mobile-nav-backdrop {
        position: absolute;
        inset: 0;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
    }

    .mobile-nav {
        position: relative;
        width: 100%;
        max-width: 320px;
        height: 100vh;
        background: var(--myst-bg);
        border-right: 1px solid color-mix(in srgb, white 10%, transparent);
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        transition: transform 0.3s ease;
    }

    .mobile-nav-header {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 16px;
        border-bottom: 1px solid color-mix(in srgb, white 10%, transparent);
    }

    .mobile-nav-close {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 32px;
        height: 32px;
        background: transparent;
        border: 1px solid color-mix(in srgb, white 15%, transparent);
        border-radius: 6px;
        color: var(--myst-ink);
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .mobile-nav-close:hover {
        background: color-mix(in srgb, white 5%, transparent);
        border-color: color-mix(in srgb, white 30%, transparent);
    }

    .mobile-nav-content {
        flex: 1;
        padding: 32px 0;
    }

    .mobile-nav-link {
        display: flex;
        align-items: center;
        padding: 18px 28px;
        color: #e2e8f0;
        text-decoration: none;
        font-weight: 600;
        font-size: 1.1rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border-left: 4px solid transparent;
        letter-spacing: 0.025em;
    }

    .mobile-nav-link:hover {
        color: #ffffff;
        background: linear-gradient(90deg, rgba(16, 185, 129, 0.1), transparent);
        border-left-color: #10b981;
        transform: translateX(6px);
    }

    .mobile-nav-link.active {
        color: #ffffff;
        background: linear-gradient(
                90deg,
                rgba(16, 185, 129, 0.2),
                rgba(34, 197, 94, 0.1)
        );
        border-left-color: #22c55e;
        box-shadow: 0 0 0 1px rgba(34, 197, 94, 0.1) inset;
    }

    .search-button {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        height: 40px;
        flex: 1;
        min-width: 200px;
        background: color-mix(in srgb, var(--myst-bg) 60%, transparent);
        border: 1px solid color-mix(in srgb, white 15%, transparent);
        border-radius: 6px;
        color: var(--myst-ink);
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: "Inter", sans-serif;
        font-size: 14px;
        font-weight: 500;
        backdrop-filter: blur(8px);
        justify-content: center;
    }

    .search-button:hover {
        background: color-mix(in srgb, white 5%, transparent);
        border-color: color-mix(in srgb, white 30%, transparent);
    }

    .search-text {
        color: var(--myst-ink-muted);
    }

    .search-shortcut {
        background: color-mix(in srgb, var(--myst-ink) 10%, transparent);
        color: var(--myst-ink-muted);
        border: 1px solid color-mix(in srgb, var(--myst-ink) 20%, transparent);
        border-radius: 4px;
        padding: 2px 6px;
        font-size: 11px;
        font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
    }

    .theme-toggle-button {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        min-width: 40px;
        min-height: 40px;
        background: color-mix(in srgb, var(--myst-bg) 60%, transparent);
        border: 1px solid color-mix(in srgb, white 15%, transparent);
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        backdrop-filter: blur(8px);
        padding: 0;
        flex-shrink: 0;
    }

    .theme-toggle-button:hover {
        background: color-mix(in srgb, white 5%, transparent);
        border-color: color-mix(in srgb, white 30%, transparent);
    }

    .theme-emoji {
        font-size: 14px;
        line-height: 1;
        display: block;
        transition: transform 0.3s ease;
    }

    .theme-toggle-button:hover .theme-emoji {
        transform: scale(1.1);
    }

    .nav-separator {
        margin-left: 150px;
    }

    .mobile-nav-actions {
        margin-top: 32px;
        padding: 0 28px;
        border-top: 1px solid rgba(148, 163, 184, 0.1);
        background: rgba(15, 23, 42, 0.5);
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .mobile-search-button {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        width: 100%;
        padding: 16px 24px;
        background: color-mix(in srgb, var(--myst-bg) 60%, transparent);
        border: 1px solid color-mix(in srgb, white 15%, transparent);
        border-radius: 12px;
        color: var(--myst-ink);
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1.1rem;
        font-weight: 600;
        backdrop-filter: blur(8px);
    }

    .mobile-search-button:hover {
        background: color-mix(in srgb, white 5%, transparent);
        border-color: color-mix(in srgb, white 30%, transparent);
    }

    .mobile-theme-toggle {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        width: 100%;
        padding: 16px 24px;
        background: color-mix(in srgb, var(--myst-bg) 60%, transparent);
        border: 1px solid color-mix(in srgb, white 15%, transparent);
        border-radius: 12px;
        color: var(--myst-ink);
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1.1rem;
        font-weight: 600;
        backdrop-filter: blur(8px);
    }

    .mobile-theme-toggle:hover {
        background: color-mix(in srgb, white 5%, transparent);
        border-color: color-mix(in srgb, white 30%, transparent);
    }

    .mobile-language-selector {
        margin: 8px 0;
    }

    /* Light theme adjustments */
    :root[data-theme="light"] .main-header,
    :root[data-theme="parchment"] .main-header {
        background: color-mix(in srgb, var(--myst-bg) 90%, white);
        border-bottom-color: color-mix(in srgb, var(--myst-gold) 30%, transparent);
    }

    :root[data-theme="light"] .search-button,
    :root[data-theme="light"] .mobile-search-button,
    :root[data-theme="light"] .theme-toggle-button,
    :root[data-theme="parchment"] .search-button,
    :root[data-theme="parchment"] .mobile-search-button,
    :root[data-theme="parchment"] .theme-toggle-button {
        background: color-mix(in srgb, var(--myst-bg) 80%, white);
        border-color: color-mix(in srgb, var(--myst-gold) 30%, transparent);
    }

    :root[data-theme="light"] .search-button:hover,
    :root[data-theme="light"] .mobile-search-button:hover,
    :root[data-theme="light"] .theme-toggle-button:hover,
    :root[data-theme="parchment"] .search-button:hover,
    :root[data-theme="parchment"] .mobile-search-button:hover,
    :root[data-theme="parchment"] .theme-toggle-button:hover {
        background: color-mix(in srgb, var(--myst-gold) 10%, var(--myst-bg));
        border-color: var(--myst-gold);
    }

    :root[data-theme="light"] .mobile-nav,
    :root[data-theme="parchment"] .mobile-nav {
        background: var(--myst-bg);
        border-right-color: color-mix(in srgb, var(--myst-gold) 30%, transparent);
    }

    :root[data-theme="light"] .mobile-nav-close,
    :root[data-theme="light"] .mobile-nav-toggle,
    :root[data-theme="parchment"] .mobile-nav-close,
    :root[data-theme="parchment"] .mobile-nav-toggle {
        border-color: color-mix(in srgb, var(--myst-gold) 30%, transparent);
    }

    /* Visibility utilities */
    .hide-mobile {
        display: block;
    }

    .show-mobile {
        display: none;
    }

    /* Responsive breakpoints */
    @media (max-width: 768px) {
        .navigation {
            display: none;
        }

        .mobile-nav-toggle {
            display: flex;
        }

        .hide-mobile {
            display: none;
        }

        .show-mobile {
            display: block;
        }

        .search-button {
            padding: 8px;
            min-width: 40px;
            max-width: 40px;
            flex: 0 0 40px;
        }

        .search-text,
        .search-shortcut {
            display: none;
        }

        .header-actions {
            gap: 8px;
            flex: 0 0 auto;
        }

        .nav-separator {
            margin-left: 16px;
        }
    }

    @media (min-width: 1200px) {
        .search-button {
            min-width: 320px;
        }
    }

    @media (max-width: 480px) {
        .main-header {
            padding: 0 12px;
        }

        .header-content {
            gap: 16px;
        }

        .logo-text {
            font-size: 16px;
        }

        .header-actions {
            gap: 6px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const header = document.querySelector('[data-main-header]');
        if (!header) return;

        const mobileToggle = header.querySelector('[data-mobile-toggle]');
        const mobileOverlay = header.querySelector('[data-mobile-overlay]');
        const mobileBackdrop = header.querySelector('[data-mobile-backdrop]');
        const mobileClose = header.querySelector('[data-mobile-close]');
        const mobileLinks = header.querySelectorAll('[data-mobile-link]');

        let isMobileNavOpen = false;

        // Simple page loader overlay with minimum visible duration
        let loaderOverlay;
        let loaderShownAt = 0;
        let loaderVisible = false;
        const MIN_LOADER_MS = 550; // smooth out too-fast transitions

        function ensureLoader() {
            if (loaderOverlay && document.body.contains(loaderOverlay)) return loaderOverlay;
            loaderOverlay = document.createElement('div');
            loaderOverlay.className = 'page-loading-overlay';
            const spinner = document.createElement('div');
            spinner.className = 'simple-spinner';
            loaderOverlay.appendChild(spinner);
            document.body.appendChild(loaderOverlay);
            return loaderOverlay;
        }
        function showLoader() {
            ensureLoader();
            if (loaderVisible) return; // idempotent
            loaderVisible = true;
            loaderShownAt = performance.now();
            document.body.classList.add('page-loading');
            loaderOverlay.classList.add('active');
        }
        function hideLoader() {
            if (!loaderOverlay) return;
            const doHide = () => {
                loaderVisible = false;
                loaderOverlay.classList.remove('active');
                document.body.classList.remove('page-loading');
            };

            if (!loaderVisible) {
                // If already considered hidden, just ensure classes are removed
                doHide();
                return;
            }

            const elapsed = performance.now() - loaderShownAt;
            const remaining = MIN_LOADER_MS - elapsed;
            if (remaining > 0) {
                setTimeout(doHide, remaining);
            } else {
                doHide();
            }
        }

        // Hide loader after new page paints
        window.addEventListener('pageshow', hideLoader);
        window.addEventListener('load', hideLoader);
        window.addEventListener('beforeunload', () => {
            // Show loader when leaving the page
            showLoader();
        });

        function openMobileNav() {
            isMobileNavOpen = true;
            mobileOverlay.style.display = 'flex';
            mobileToggle.setAttribute('aria-expanded', 'true');
            document.body.style.overflow = 'hidden';
        }

        function closeMobileNav() {
            isMobileNavOpen = false;
            mobileOverlay.style.display = 'none';
            mobileToggle.setAttribute('aria-expanded', 'false');
            document.body.style.overflow = '';
        }

        // Toggle mobile navigation
        if (mobileToggle) {
            mobileToggle.addEventListener('click', function () {
                if (isMobileNavOpen) {
                    closeMobileNav();
                } else {
                    openMobileNav();
                }
            });
        }

        // Close mobile navigation
        if (mobileClose) {
            mobileClose.addEventListener('click', closeMobileNav);
        }

        if (mobileBackdrop) {
            mobileBackdrop.addEventListener('click', closeMobileNav);
        }

        // Handle SPA navigation for external links
        function handleSPANavigation(event, link) {
            const isExternal = link.getAttribute('data-spa-nav') === 'true';
            
            if (isExternal && window.parent !== window) {
                event.preventDefault();
                
                // Close mobile nav if open
                if (isMobileNavOpen) {
                    closeMobileNav();
                }
                
                // Extract the path from the full URL
                const url = new URL(link.href);
                const targetPath = url.pathname;
                
                // Show loader during SPA navigation dispatch
                showLoader();
                
                // Send message to parent SPA to navigate
                window.parent.postMessage({
                    type: 'spa-navigate',
                    path: targetPath,
                    url: link.href
                }, '*');
                
                console.log('SPA navigation requested:', targetPath);
            }
        }

        // Debounce helper to avoid rapid re-clicks
        let navDebounce = false;
        function shouldProceedNavigation(event) {
            if (navDebounce) {
                if (event && typeof event.preventDefault === 'function') event.preventDefault();
                return false;
            }
            navDebounce = true;
            setTimeout(() => { navDebounce = false; }, 800);
            return true;
        }

        // Close mobile nav when clicking on links and handle SPA navigation
        mobileLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                // Allow opening in new tab/window without interference
                if (event.ctrlKey || event.metaKey) return;
                if (!shouldProceedNavigation(event)) return;
                // Show loader for regular navigations
                if (link.getAttribute('data-spa-nav') !== 'true') {
                    showLoader();
                }
                handleSPANavigation(event, link);
                closeMobileNav();
            });
        });

        // Show loader on desktop navigation links and logo clicks
        const desktopLinks = header.querySelectorAll('.nav-link, .header-logo-link');
        desktopLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                // Do not interfere with new tab/window
                if (event.ctrlKey || event.metaKey || link.target === '_blank') return;
                if (!shouldProceedNavigation(event)) return;
                // If it's SPA navigation, handleSPANavigation will show loader
                if (link.getAttribute('data-spa-nav') === 'true') {
                    handleSPANavigation(event, link);
                    return;
                }
                // For regular same-origin navigations, show loader
                try {
                    const url = new URL(link.href, window.location.href);
                    if (url.origin === window.location.origin) {
                        showLoader();
                    }
                } catch (e) {
                    // ignore
                }
            });
        });

        // Handle SPA navigation for desktop nav links and logo
        const spaNavLinks = header.querySelectorAll('[data-spa-nav="true"]');
        spaNavLinks.forEach(link => {
            link.addEventListener('click', function(event) {
                handleSPANavigation(event, link);
            });
        });

        // Close mobile nav on escape key
        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape' && isMobileNavOpen) {
                closeMobileNav();
            }
        });

        // Handle route changes for active link highlighting
        function updateActiveLink() {
            const currentPath = window.location.pathname;
            const navLinks = header.querySelectorAll('.nav-link, .mobile-nav-link');

            navLinks.forEach(link => {
                const linkPath = link.getAttribute('data-path') || link.getAttribute('href');
                if (linkPath === currentPath) {
                    link.classList.add('active');
                } else {
                    link.classList.remove('active');
                }
            });
        }

        // Update active link on page load
        updateActiveLink();

        // Update active link on navigation (if using client-side routing)
        window.addEventListener('popstate', updateActiveLink);

        // Handle search modal
        const searchButtons = header.querySelectorAll('[data-search-modal]');
        searchButtons.forEach(button => {
            button.addEventListener('click', function () {
                // Trigger Starlight's search modal
                const starlightSearch = document.querySelector('[data-open-modal]') ||
                    document.querySelector('site-search') ||
                    document.querySelector('[aria-label*="Search"]');

                if (starlightSearch && starlightSearch.click) {
                    starlightSearch.click();
                } else {
                    // Fallback: try to trigger search with keyboard shortcut
                    const event = new KeyboardEvent('keydown', {
                        key: 'k',
                        metaKey: true,
                        bubbles: true
                    });
                    document.dispatchEvent(event);
                }
            });
        });

        // Handle keyboard shortcut for search
        document.addEventListener('keydown', function (e) {
            if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
                e.preventDefault();
                const searchButton = header.querySelector('[data-search-modal]');
                if (searchButton) {
                    searchButton.click();
                }
            }
        });

        const translations = {
            uk: {
                home: '–ì–æ–ª–æ–≤–Ω–∞',
                guides: '–ü–æ—Å—ñ–±–Ω–∏–∫–∏',
                magic: '–ú–∞–≥—ñ—è',
                pathways: '–®–ª—è—Ö–∏',
                promoters: '–ü—Ä–æ–º–æ—É—Ç–µ—Ä—Å—Ç–≤–æ',
                support: '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞',
                search: '–ü–æ—à—É–∫'
            },
            en: {
                home: 'Home',
                guides: 'Guides',
                magic: 'Magic',
                pathways: 'Pathways',
                promoters: 'Promoters',
                support: 'Support',
                search: 'Search'
            }
        };

        function updateHeaderTranslations() {
            const currentPath = window.location.pathname;
            const isEnglish = currentPath.startsWith('/en/') || currentPath === '/en';
            const currentLang = isEnglish ? 'en' : 'uk';
            const t = translations[currentLang];

            // Update navigation links text only (URLs are set in the component)
            const navLinks = header.querySelectorAll('.nav-link, .mobile-nav-link');
            navLinks.forEach((link, index) => {
                // Map links by their position in the navigation array
                switch (index) {
                    case 0: // Home
                        link.textContent = t.home;
                        break;
                    case 1: // Guides
                        link.textContent = t.guides;
                        break;
                    case 2: // Magic
                        link.textContent = t.magic;
                        break;
                    case 3: // Pathways
                        link.textContent = t.pathways;
                        break;
                    case 4: // Promoters
                        link.textContent = t.promoters;
                        break;
                    case 5: // Support
                        link.textContent = t.support;
                        break;
                }
            });

            // Update search buttons
            const searchButtons = header.querySelectorAll('[data-search-modal]');
            searchButtons.forEach(button => {
                const searchText = button.querySelector('.search-text, span');
                if (searchText) {
                    searchText.textContent = t.search;
                }
                button.setAttribute('aria-label', t.search);
            });

            console.log('Header translations updated to:', currentLang);
        }

        // Update translations on page load
        updateHeaderTranslations();

        // Listen for navigation changes (including language switching)
        window.addEventListener('popstate', updateHeaderTranslations);

        // Listen for custom language change events
        window.addEventListener('languageChange', function (e) {
            console.log('Language change detected:', e.detail);
            // The page will redirect, so no need to update here
        });

        // Also watch for URL changes that might happen with client-side routing
        let lastUrl = window.location.href;
        const urlChecker = setInterval(() => {
            if (window.location.href !== lastUrl) {
                lastUrl = window.location.href;
                updateHeaderTranslations();
            }
        }, 100);

        // Clean up interval after 10 seconds (when navigation is stable)
        setTimeout(() => clearInterval(urlChecker), 10000);

        // Initialize language selector with correct current language
        function updateLanguageSelector() {
            const currentPath = window.location.pathname;
            const isEnglish = currentPath.startsWith('/en/') || currentPath === '/en';
            const currentLang = isEnglish ? 'en' : 'uk';

            const languageSelectors = document.querySelectorAll('.language-selector');
            languageSelectors.forEach(selector => {
                const trigger = selector.querySelector('.dropdown-trigger');
                if (trigger) {
                    const label = currentLang === 'en' ? 'üá¨üáß EN' : 'üá∫üá¶ UK';
                    const textNode = trigger.querySelector('[slot]') || trigger.childNodes[0];
                    if (textNode && textNode.textContent) {
                        textNode.textContent = label;
                    }
                }
            });
        }

        // Initialize language selector on load
        setTimeout(updateLanguageSelector, 100);

        // Theme toggle functionality
        function initializeThemeToggle() {
            const themeToggle = header.querySelector('[data-theme-toggle]');
            const mobileThemeToggle = header.querySelector('[data-mobile-theme-toggle]');
            const themeIcon = header.querySelector('[data-theme-icon]');
            const mobileThemeIcon = header.querySelector('[data-mobile-theme-icon]');

            if (!themeToggle || !themeIcon) return;

            let isToggling = false;

            // Get current theme
            function getCurrentTheme() {
                return document.documentElement.getAttribute('data-theme') || 'dark';
            }

            // Update theme icons
            function updateThemeIcons(theme) {
                const emoji = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
                
                if (themeIcon) themeIcon.textContent = emoji;
                if (mobileThemeIcon) mobileThemeIcon.textContent = emoji;
            }

            // Toggle theme
            function toggleTheme(event) {
                if (isToggling) return;
                
                event.preventDefault();
                event.stopPropagation();
                
                isToggling = true;
                
                const currentTheme = getCurrentTheme();
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('starlight-theme', newTheme);
                
                updateThemeIcons(newTheme);
                
                console.log('Theme toggled from', currentTheme, 'to', newTheme);
                
                setTimeout(() => {
                    isToggling = false;
                }, 300);
            }

            // Initialize theme icons
            const initialTheme = getCurrentTheme();
            updateThemeIcons(initialTheme);

            // Remove any existing listeners to prevent duplicates
            const newThemeToggle = themeToggle.cloneNode(true);
            const newThemeIcon = newThemeToggle.querySelector('[data-theme-icon]');
            themeToggle.parentNode.replaceChild(newThemeToggle, themeToggle);
            
            let newMobileThemeToggle, newMobileThemeIcon;
            if (mobileThemeToggle) {
                newMobileThemeToggle = mobileThemeToggle.cloneNode(true);
                newMobileThemeIcon = newMobileThemeToggle.querySelector('[data-mobile-theme-icon]');
                mobileThemeToggle.parentNode.replaceChild(newMobileThemeToggle, mobileThemeToggle);
            }

            // Update references to use the new elements
            const finalThemeIcon = newThemeIcon;
            const finalMobileThemeIcon = newMobileThemeIcon;

            // Update icons function with new references
            function updateThemeIconsFinal(theme) {
                const emoji = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
                
                if (finalThemeIcon) finalThemeIcon.textContent = emoji;
                if (finalMobileThemeIcon) finalMobileThemeIcon.textContent = emoji;
            }

            // Updated toggle function
            function toggleThemeFinal(event) {
                if (isToggling) return;
                
                event.preventDefault();
                event.stopPropagation();
                
                isToggling = true;
                
                const currentTheme = getCurrentTheme();
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('starlight-theme', newTheme);
                
                updateThemeIconsFinal(newTheme);
                
                console.log('Theme toggled from', currentTheme, 'to', newTheme);
                
                setTimeout(() => {
                    isToggling = false;
                }, 300);
            }

            // Initialize with correct icons
            updateThemeIconsFinal(initialTheme);

            // Add fresh event listeners
            newThemeToggle.addEventListener('click', toggleThemeFinal, { passive: false });
            if (newMobileThemeToggle) {
                newMobileThemeToggle.addEventListener('click', toggleThemeFinal, { passive: false });
            }

            // Update icons when theme changes
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme' && !isToggling) {
                        const newTheme = getCurrentTheme();
                        updateThemeIcons(newTheme);
                    }
                });
            });

            observer.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ['data-theme']
            });
        }

        // Initialize theme toggle with a single call
        setTimeout(initializeThemeToggle, 500);
    });
</script>