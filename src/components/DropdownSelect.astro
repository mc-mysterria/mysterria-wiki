---
export interface Props {
  modelValue?: string | number | string[];
  options: Array<{
    label: string;
    value: string | number;
    [key: string]: any;
  }>;
  placeholder?: string;
  searchPlaceholder?: string;
  displayKey?: string;
  valueKey?: string;
  descriptionKey?: string;
  searchable?: boolean;
  allowCustomInput?: boolean;
  disabled?: boolean;
  clearable?: boolean;
  multiple?: boolean;
  maxHeight?: number;
  noResultsText?: string;
  minWidth?: number;
  maxWidth?: number;
  formFieldStyle?: boolean;
  showIcon?: boolean;
  icon?: string;
  id?: string;
}

const {
  placeholder = "",
  searchPlaceholder = "",
  displayKey = "label",
  valueKey = "value",
  descriptionKey = "description",
  searchable = false,
  allowCustomInput = false,
  disabled = false,
  clearable = false,
  multiple = false,
  maxHeight = 300,
  noResultsText = "No results found",
  minWidth = 200,
  maxWidth = 600,
  formFieldStyle = false,
  showIcon = false,
  icon = "",
  options = [],
  modelValue,
  id = "dropdown-" + Math.random().toString(36).substr(2, 9)
} = Astro.props;

const selectedOption = options.find(option => option[valueKey] === modelValue);
const placeholderText = placeholder || "Select option";
const searchPlaceholderText = searchPlaceholder || "Search";
---

<div
  class={`dropdown-wrapper ${formFieldStyle ? 'form-field-style' : ''}`}
  data-dropdown
  data-id={id}
>
  {showIcon && icon && (
    <i class={`dropdown-icon ${icon}`} aria-hidden="true"></i>
  )}
  <div
    class={`dropdown-trigger ${disabled ? 'is-disabled' : ''} ${showIcon ? 'with-icon' : ''}`}
    tabindex={disabled ? -1 : 0}
    role="combobox"
    aria-expanded="false"
    aria-haspopup="listbox"
    aria-labelledby={`${id}-label`}
  >
    <div class="dropdown-value">
      <slot name="selected" selectedOption={selectedOption} placeholder={placeholderText}>
        {selectedOption ? selectedOption[displayKey] : placeholderText}
      </slot>
    </div>
    <div class="dropdown-arrow">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="m6 9 6 6 6-6"></path>
      </svg>
    </div>
  </div>
</div>

<style>
.dropdown-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
}

.dropdown-wrapper.form-field-style {
  display: flex;
  background-color: #1e2126;
  border: 1px solid #3a3d45;
  border-radius: 8px;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.dropdown-wrapper.form-field-style:hover {
  border-color: #555966;
}

.dropdown-wrapper.form-field-style:focus-within {
  border-color: #ee7828;
  box-shadow: 0 0 0 3px rgba(238, 120, 40, 0.2);
}

.dropdown-icon {
  display: flex;
  align-items: center;
  padding-left: 16px;
  color: #707070;
}

.dropdown-trigger {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 12px 16px;
  background-color: #1e212b;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  color: #ffffff;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  min-height: auto;
  box-sizing: border-box;
  backdrop-filter: blur(10px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.form-field-style .dropdown-trigger {
  background: transparent;
  border: none;
  box-shadow: none;
  backdrop-filter: none;
  border-radius: 0;
  flex: 1;
}

.dropdown-trigger:hover:not(.is-disabled) {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
}

.dropdown-trigger.is-disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.dropdown-value {
  flex: 1;
  text-align: left;
  color: #ffffff;
}

.dropdown-arrow {
  color: #cccccc;
  transition: transform 0.3s ease;
  flex-shrink: 0;
  margin-left: 8px;
}

.dropdown-arrow.is-open {
  transform: rotate(180deg);
}

/* Light theme adjustments */
:root[data-theme="light"] .dropdown-trigger,
:root[data-theme="parchment"] .dropdown-trigger {
  background-color: var(--myst-bg);
  color: var(--myst-ink);
  border-color: color-mix(in srgb, var(--myst-gold) 30%, transparent);
}

:root[data-theme="light"] .dropdown-trigger:hover:not(.is-disabled),
:root[data-theme="parchment"] .dropdown-trigger:hover:not(.is-disabled) {
  background: color-mix(in srgb, var(--myst-gold) 10%, var(--myst-bg));
  border-color: var(--myst-gold);
}

:root[data-theme="light"] .dropdown-value,
:root[data-theme="parchment"] .dropdown-value {
  color: var(--myst-ink);
}

:root[data-theme="light"] .dropdown-arrow,
:root[data-theme="parchment"] .dropdown-arrow {
  color: var(--myst-ink-muted);
}

@media (max-width: 768px) {
  .dropdown-trigger {
    padding: 10px 12px;
    font-size: 0.9rem;
  }
}

@media (max-width: 480px) {
  .dropdown-trigger {
    padding: 8px 10px;
    font-size: 0.85rem;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Basic dropdown functionality for Astro
  // This is a simplified version - full interactivity would require client-side JS
  const dropdowns = document.querySelectorAll('[data-dropdown]');
  
  dropdowns.forEach(dropdown => {
    const trigger = dropdown.querySelector('.dropdown-trigger');
    const arrow = dropdown.querySelector('.dropdown-arrow');
    
    if (trigger && !trigger.classList.contains('is-disabled')) {
      trigger.addEventListener('click', function() {
        // Toggle expanded state
        const expanded = trigger.getAttribute('aria-expanded') === 'true';
        trigger.setAttribute('aria-expanded', (!expanded).toString());
        arrow?.classList.toggle('is-open', !expanded);
      });
      
      trigger.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          trigger.click();
        }
      });
    }
  });
});
</script>